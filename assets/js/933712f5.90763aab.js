"use strict";(self.webpackChunkduroom_docs=self.webpackChunkduroom_docs||[]).push([[4616],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||s;return n?o.createElement(h,a(a({ref:t},p),{},{components:n})):o.createElement(h,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=c;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,a[1]=r;for(var u=2;u<s;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4698:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return r},metadata:function(){return u},toc:function(){return d}});var o=n(7462),i=n(3366),s=(n(7294),n(3905)),a=["components"],r={},l="Testing",u={unversionedId:"extend/testing",id:"extend/testing",title:"Testing",description:"Automated testing ensures that your extension performs as you expect it to, helps avoid introducing new bugs or regressions, and saves time on manual testing.",source:"@site/docs/extend/testing.md",sourceDirName:"extend",slug:"/extend/testing",permalink:"/extend/testing",draft:!1,editUrl:"https://github.com/DuRoom/docs/tree/master/docs/extend/testing.md",tags:[],version:"current",frontMatter:{},sidebar:"extendSidebar",previous:{title:"Settings",permalink:"/extend/settings"},next:{title:"Themes",permalink:"/extend/theme"}},p={},d=[{value:"Backend Tests",id:"backend-tests",level:2},{value:"Setup",id:"setup",level:3},{value:"phpunit.integration.xml",id:"phpunitintegrationxml",level:4},{value:"phpunit.unit.xml",id:"phpunitunitxml",level:4},{value:"setup.php",id:"setupphp",level:4},{value:"composer.json Modifications",id:"composerjson-modifications",level:4},{value:"GitHub Testing Workflow",id:"github-testing-workflow",level:4},{value:"Using Integration Tests",id:"using-integration-tests",level:3},{value:"Test Case Setup",id:"test-case-setup",level:4},{value:"Sending Requests",id:"sending-requests",level:4},{value:"Console Tests",id:"console-tests",level:4},{value:"Using Unit Tests",id:"using-unit-tests",level:3},{value:"Mocking DuRoom Services",id:"mocking-duroom-services",level:4},{value:"Frontend Tests",id:"frontend-tests",level:2},{value:"E2E Tests",id:"e2e-tests",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,s.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"testing"},"Testing"),(0,s.kt)("p",null,"Automated testing ensures that your extension performs as you expect it to, helps avoid introducing new bugs or regressions, and saves time on manual testing.\nDuRoom currently provides tooling for automated backend unit and integration tests, and we plan to release support for frontend unit testing and E2E testing in the future."),(0,s.kt)("h2",{id:"backend-tests"},"Backend Tests"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"duroom/testing")," library is used by core and some bundled extensions for automated unit and integration tests.\nIt is essentially a collection of utils that allow testing DuRoom core and extensions with PHPUnit."),(0,s.kt)("h3",{id:"setup"},"Setup"),(0,s.kt)("p",null,"Firstly, you will need to require the ",(0,s.kt)("inlineCode",{parentName:"p"},"duroom/testing")," composer package as a dev dependency for your extension:"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"composer require --dev duroom/testing:^1.0")),(0,s.kt)("p",null,"Then, you will need to set up a file structure for tests, and add PHPUnit configuration:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"tests\n\u251c\u2500\u2500 fixtures (put any files needed by your tests here (blade templates, images, etc))\n\u251c\u2500\u2500 integration\n\u2502   \u251c\u2500\u2500 setup.php (code below)\n\u2502   \u2514\u2500\u2500 PUT INTEGRATION TESTS HERE (organizing into folder is generally a good idea)\n\u251c\u2500\u2500 unit\n\u2502   \u251c\u2500\u2500 PUT UNIT TESTS HERE\n\u251c\u2500\u2500 phpunit.integration.xml (code below)\n\u2514\u2500\u2500 phpunit.unit.xml (code below)\n")),(0,s.kt)("h4",{id:"phpunitintegrationxml"},"phpunit.integration.xml"),(0,s.kt)("p",null,"This is just an example ",(0,s.kt)("a",{parentName:"p",href:"https://phpunit.readthedocs.io/en/9.3/configuration.html"},"phpunit config file")," for integration tests. You can tweak this as needed, but keep ",(0,s.kt)("inlineCode",{parentName:"p"},"backupGlobals"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"backupStaticAttributes"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"processIsolation")," unchanged."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n\n<phpunit backupGlobals="false"\n         backupStaticAttributes="false"\n         colors="true"\n         convertErrorsToExceptions="true"\n         convertNoticesToExceptions="true"\n         convertWarningsToExceptions="true"\n         processIsolation="true"\n         stopOnFailure="false">\n\n    <testsuites>\n        <testsuite name="DuRoom Integration Tests">\n            <directory suffix="Test.php">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n')),(0,s.kt)("h4",{id:"phpunitunitxml"},"phpunit.unit.xml"),(0,s.kt)("p",null,"This is just an example ",(0,s.kt)("a",{parentName:"p",href:"https://phpunit.readthedocs.io/en/9.3/configuration.html"},"phpunit config file")," for unit tests. You can tweak this as needed."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n\n<phpunit backupGlobals="false"\n         backupStaticAttributes="false"\n         colors="true"\n         convertErrorsToExceptions="true"\n         convertNoticesToExceptions="true"\n         convertWarningsToExceptions="true"\n         processIsolation="false"\n         stopOnFailure="false">\n\n    <testsuites>\n        <testsuite name="DuRoom Unit Tests">\n            <directory suffix="Test.php">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class="\\Mockery\\Adapter\\Phpunit\\TestListener"></listener>\n    </listeners>\n</phpunit>\n')),(0,s.kt)("h4",{id:"setupphp"},"setup.php"),(0,s.kt)("p",null,"This script will be run to set up a testing database / file structure."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse DuRoom\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n")),(0,s.kt)("h4",{id:"composerjson-modifications"},"composer.json Modifications"),(0,s.kt)("p",null,"We will also want to add scripts to our ",(0,s.kt)("inlineCode",{parentName:"p"},"composer.json"),", so that we can run our test suite via ",(0,s.kt)("inlineCode",{parentName:"p"},"composer test"),". Add some variant of the following to your ",(0,s.kt)("inlineCode",{parentName:"p"},"composer.json"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n    "test": [\n        "@test:unit",\n        "@test:integration"\n    ],\n    "test:unit": "phpunit -c tests/phpunit.unit.xml",\n    "test:integration": "phpunit -c tests/phpunit.integration.xml",\n    "test:setup": "@php tests/integration/setup.php"\n},\n"scripts-descriptions": {\n    "test": "Runs all tests.",\n    "test:unit": "Runs all unit tests.",\n    "test:integration": "Runs all integration tests.",\n    "test:setup": "Sets up a database for use with integration tests. Execute this only once."\n}\n')),(0,s.kt)("h4",{id:"github-testing-workflow"},"GitHub Testing Workflow"),(0,s.kt)("p",null,"In public repos, GitHub Actions allow you to run all your tests on every commit and pull request for free. You can copy ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/DuRoom/core/blob/master/.github/workflows/test.yml"},"DuRoom core's GitHub Actions")," testing workflow into your extension's ",(0,s.kt)("inlineCode",{parentName:"p"},".github/workflows")," folder to enable this."),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Now that we have everything in place, we need to set up our testing site for integration tests. For this, we will need a MySQL or MariaDb instance, and a place to store testing files."),(0,s.kt)("p",null,"Testing database information is configured via the ",(0,s.kt)("inlineCode",{parentName:"p"},"DB_HOST")," (defaults to ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost"),"), ",(0,s.kt)("inlineCode",{parentName:"p"},"DB_PORT")," (defaults to ",(0,s.kt)("inlineCode",{parentName:"p"},"3306"),"), ",(0,s.kt)("inlineCode",{parentName:"p"},"DB_DATABASE")," (defaults to ",(0,s.kt)("inlineCode",{parentName:"p"},"duroom_test"),"), ",(0,s.kt)("inlineCode",{parentName:"p"},"DB_USERNAME")," (defaults to ",(0,s.kt)("inlineCode",{parentName:"p"},"root"),"), ",(0,s.kt)("inlineCode",{parentName:"p"},"DB_PASSWORD")," (defaults to ",(0,s.kt)("inlineCode",{parentName:"p"},"root"),"), and ",(0,s.kt)("inlineCode",{parentName:"p"},"DB_PREFIX")," (defaults to ",(0,s.kt)("inlineCode",{parentName:"p"},"''"),") environmental variables. The testing tmp directory path is configured via the ",(0,s.kt)("inlineCode",{parentName:"p"},"DUROOM_TEST_TMP_DIR_LOCAL")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"DUROOM_TEST_TMP_DIR")," environmental variables, with the former taking precedence over the latter. If neither are provided, a ",(0,s.kt)("inlineCode",{parentName:"p"},"tmp")," directory will be created in the ",(0,s.kt)("inlineCode",{parentName:"p"},"vendor")," folder of your extension's local install."),(0,s.kt)("p",null,"Now that we've provided the needed information, all we need to do is run ",(0,s.kt)("inlineCode",{parentName:"p"},"composer test:setup")," in our extension's root directory, and we have our testing environment ready to go!"),(0,s.kt)("p",null,"Since ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/DuRoom/framework/blob/4ecd9a9b2ff0e9ba42bb158f3f83bb3ddfc10853/framework/core/tests/integration/api/discussions/ListWithFulltextSearchTest.php#L29-L45"},"(almost)")," all database operations in integration tests are run in transactions, developers working on multiple extensions will generally find it more convenient to use one shared database and tmp directory for testing all their extensions. To do this, set the database config and ",(0,s.kt)("inlineCode",{parentName:"p"},"DUROOM_TEST_TMP_DIR")," environmental variables in your ",(0,s.kt)("inlineCode",{parentName:"p"},".bashrc")," or ",(0,s.kt)("inlineCode",{parentName:"p"},".bash_profile")," to the path you want to use, and run the setup script for any one extension (you'll still want to include the setup file in every repo for CI testing via GitHub Actions). You should then be good to go for any DuRoom extension (or core)."),(0,s.kt)("h3",{id:"using-integration-tests"},"Using Integration Tests"),(0,s.kt)("p",null,"DuRoom's integration test utils are contained in the ",(0,s.kt)("inlineCode",{parentName:"p"},"DuRoom\\Testing\\integration\\TestCase")," class. It:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Boots (and makes available) an instance of the DuRoom application."),(0,s.kt)("li",{parentName:"ul"},"Allows pre-populating the database, enabling extensions, and adding extenders."),(0,s.kt)("li",{parentName:"ul"},"Runs all database changes in transactions, so your test database retains the default post-installation state."),(0,s.kt)("li",{parentName:"ul"},"Allows sending requests through the middleware stack to test HTTP endpoints.")),(0,s.kt)("p",null,"Your testcase classes should extend this class."),(0,s.kt)("h4",{id:"test-case-setup"},"Test Case Setup"),(0,s.kt)("p",null,"There are several important utilities available for your test cases:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"setting($key, $value)")," method allows you to override settings before the app has booted. This is useful if your boot process has logic depending on settings (e.g. which driver to use for some system)."),(0,s.kt)("li",{parentName:"ul"},"Similarly, the ",(0,s.kt)("inlineCode",{parentName:"li"},"config($key, $value)")," method allows you to override config.php values before the app has booted. You can use dot-delimited keys to set deep-nested values in the config array."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"extension($extensionId)")," method will take DuRoom IDs of extensions to enable as arguments. Your extension should always call this with your extension's ID at the start of test cases, unless the goal of the test case in question is to confirm some behavior present without your extension, and compare that to behavior when your extension is enabled. If your extension is dependent on other extensions, make sure they are included in the composer.json ",(0,s.kt)("inlineCode",{parentName:"li"},"require")," field (or ",(0,s.kt)("inlineCode",{parentName:"li"},"require-dev")," for ",(0,s.kt)("a",{parentName:"li",href:"/extend/extending-extensions"},"optional dependencies"),"), and also list their composer package names when calling ",(0,s.kt)("inlineCode",{parentName:"li"},"extension()"),". Note that you must list them in a valid order."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"extend($extender)")," method takes instances of extenders as arguments, and is useful for testing extenders introduced by your extension for other extensions to use."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"prepareDatabase()")," method allow you to pre-populate your database. This could include adding users, discussions, posts, configuring permissions, etc. Its argument is an associative array that maps table names to arrays of ",(0,s.kt)("a",{parentName:"li",href:"https://laravel.com/docs/8.x/queries#insert-statements"},"record arrays"),".")),(0,s.kt)("p",null,"If your test case needs users beyond the default admin user, you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"$this->normalUser()")," method of the ",(0,s.kt)("inlineCode",{parentName:"p"},"DuRoom\\Testing\\integration\\RetrievesAuthorizedUsers")," trait."),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The ",(0,s.kt)("inlineCode",{parentName:"p"},"TestCase")," class will boot a DuRoom instance the first time its ",(0,s.kt)("inlineCode",{parentName:"p"},"app()")," method is called. Any uses of ",(0,s.kt)("inlineCode",{parentName:"p"},"prepareDatabase"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"extend"),", or ",(0,s.kt)("inlineCode",{parentName:"p"},"extension")," after this happens will have no effect. Make sure you have done all the setup you need in your test case before calling ",(0,s.kt)("inlineCode",{parentName:"p"},"app()"),", or ",(0,s.kt)("inlineCode",{parentName:"p"},"database()"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"server()"),", or ",(0,s.kt)("inlineCode",{parentName:"p"},"send()"),", which call ",(0,s.kt)("inlineCode",{parentName:"p"},"app()")," implicitly. If you need to make database modifications after the app has booted, you can use the regular Eloquent save method, or the ",(0,s.kt)("inlineCode",{parentName:"p"},"Illuminate\\Database\\ConnectionInterface")," instance obtained via calling the ",(0,s.kt)("inlineCode",{parentName:"p"},"database()")," method."))),(0,s.kt)("p",null,"Of course, since this is all based on PHPUnit, you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"setUp()")," methods of your test classes for common setup tasks."),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n/*\n * This file is part of DuRoom.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse DuRoom\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse DuRoom\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        // Let's assume our extension depends on tags.\n        // Note that tags will need to be in your extension's composer.json's `require-dev`.\n        // Also, make sure you include the ID of the extension currently being tested, unless you're\n        // testing the baseline without your extension.\n        $this->extension('duroom-tags', 'my-cool-extension');\n\n        // Note that this input isn't validated: make sure you're populating with valid, representative data.\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser() // Available for convenience.\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        // Most test cases won't need to test extenders, but if you want to, you can.\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n")),(0,s.kt)("h4",{id:"sending-requests"},"Sending Requests"),(0,s.kt)("p",null,"A common application of automated testing is pinging various HTTP endpoints with various data, authenticated as different users.\nYou can use this to ensure that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Users can't access content they're not supported to access."),(0,s.kt)("li",{parentName:"ul"},"Permission-based create/edit/delete operations perform as expected."),(0,s.kt)("li",{parentName:"ul"},"The type and schema of data returned is correct."),(0,s.kt)("li",{parentName:"ul"},"Some desired side effect is applied when pinging an API."),(0,s.kt)("li",{parentName:"ul"},"The basic API operations needed by your extension aren't erroring, and don't break when you make changes.")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"TestCase")," provides several utilities:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"request()")," method constructs a ",(0,s.kt)("inlineCode",{parentName:"li"},"Psr\\Http\\Message\\ServerRequestInterface")," implementing object from a path, a method, and some options, which can be used for authentication, attaching cookies, or configuring the JSON request body. See the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/DuRoom/testing/blob/main/src/integration/TestCase.php"},"method docblock")," for more information on available options."),(0,s.kt)("li",{parentName:"ul"},"Once you've created a request instance, you can send it (and get a response object back) via the ",(0,s.kt)("inlineCode",{parentName:"li"},"send()")," method.")),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n/*\n * This file is part of DuRoom.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse DuRoom\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n")),(0,s.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If you want to send query parameters in a GET request, you can't include them in the path; you'll need to add them afterwards with the ",(0,s.kt)("inlineCode",{parentName:"p"},"withQueryParams")," method."))),(0,s.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"This is an extreme edge case, but note that MySQL does not update the fulltext index in transactions, so the standard approach won't work if you're trying to test a modified fulltext query. See ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/DuRoom/framework/blob/main/framework/core/tests/integration/extenders/SimpleDuRoomSearchTest.php"},"core's approach")," for an example of a workaround."))),(0,s.kt)("h4",{id:"console-tests"},"Console Tests"),(0,s.kt)("p",null,"If you want to test custom console commands, you can extend ",(0,s.kt)("inlineCode",{parentName:"p"},"DuRoom\\Testing\\integration\\ConsoleTestCase")," (which itself extends the regular ",(0,s.kt)("inlineCode",{parentName:"p"},"DuRoom\\Testing\\integration\\TestCase"),"). It provides 2 useful methods:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"$this->console()")," returns an instance of ",(0,s.kt)("inlineCode",{parentName:"li"},"Symfony\\Component\\Console\\Application")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"$this->runCommand()")," takes an array that will be wrapped in ",(0,s.kt)("inlineCode",{parentName:"li"},"Symfony\\Component\\Console\\Input\\ArrayInput"),", and run. See the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/symfony/console/blob/5.x/Input/ArrayInput.php#L22"},"Symfony code docblock")," for more information.")),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n/*\n * This file is part of DuRoom.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse DuRoom\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php duroom some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n")),(0,s.kt)("h3",{id:"using-unit-tests"},"Using Unit Tests"),(0,s.kt)("p",null,"Unit testing in DuRoom uses ",(0,s.kt)("a",{parentName:"p",href:"https://phpunit.de/getting-started/phpunit-9.html"},"PHPUnit")," and so unit testing in duroom is much like any other PHP application. You can find ",(0,s.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=9-X_b_fxmRM"},"general tutorials on testing")," if you're also new to php."),(0,s.kt)("p",null,"When writing unit tests in DuRoom, here are some helpful tips."),(0,s.kt)("h4",{id:"mocking-duroom-services"},"Mocking DuRoom Services"),(0,s.kt)("p",null,"Unlike the running app, or even integration tests, there is no app/container/etc to inject service instances into our classes.  Now all the  useful settings, or helpers your extension use require a ",(0,s.kt)("em",{parentName:"p"},"mock")," . We want to limit mocking to just the key services, supporting only the minimum interactions needed to test the contract of our individual functions.  "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"    public function setUp(): void\n    {\n        parent::setUp();\n        // example - if our setting needs settings, we can mock the settings repository\n        $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n        // and then control specific return values for each setting key\n        $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n        // construct your class under test, passing mocked services as needed\n        $this->serializer = new YourClassUnderTest($settingsRepo);\n    }\n")),(0,s.kt)("p",null,"Some aspects require more mocks. If you're validating authorization interactions for instance you might need to mock your users ",(0,s.kt)("inlineCode",{parentName:"p"},"User::class")," and the request's method that provides them as well!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"    $this->actor = m::mock(User::class);\n    $request = m::mock(Request::class)->makePartial();\n    $request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n    $this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n")),(0,s.kt)("p",null,"NOTE: If you find your extension needs ",(0,s.kt)("em",{parentName:"p"},"lots and lots")," of mocks, or mocks that feel unrelated, it might be an opportunity to simplify your code, perhaps moving key logic into their own smaller functions (that dont require mocks).  "),(0,s.kt)("h2",{id:"frontend-tests"},"Frontend Tests"),(0,s.kt)("p",null,"Coming Soon!"),(0,s.kt)("h2",{id:"e2e-tests"},"E2E Tests"),(0,s.kt)("p",null,"Coming Soon!"))}m.isMDXComponent=!0}}]);