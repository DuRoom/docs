"use strict";(self.webpackChunkduroom_docs=self.webpackChunkduroom_docs||[]).push([[3649],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),u=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,y=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return t?o.createElement(y,s(s({ref:n},c),{},{components:t})):o.createElement(y,s({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=p;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var u=2;u<r;u++)s[u]=t[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},758:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return d}});var o=t(7462),i=t(3366),r=(t(7294),t(3905)),s=["components"],a={},l="Bundled Extensions Policy",u={unversionedId:"internal/bundled-extensions-policy",id:"internal/bundled-extensions-policy",title:"Bundled Extensions Policy",description:"This document is to assist in deciding what extensions should be bundled or maintained by the DuRoom project team.",source:"@site/docs/internal/bundled-extensions-policy.md",sourceDirName:"internal",slug:"/internal/bundled-extensions-policy",permalink:"/docs/internal/bundled-extensions-policy",draft:!1,editUrl:"https://github.com/DuRoom/docs/tree/master/docs/internal/bundled-extensions-policy.md",tags:[],version:"current",frontMatter:{},sidebar:"internalSidebar",previous:{title:"PR Merging Workflow",permalink:"/docs/internal/merging"},next:{title:"Package Manager",permalink:"/docs/internal/package-manager"}},c={},d=[{value:"Density",id:"density",level:3},{value:"Opinionatedness",id:"opinionatedness",level:3},{value:"Responsibility",id:"responsibility",level:3}],p={toc:d};function m(e){var n=e.components,t=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bundled-extensions-policy"},"Bundled Extensions Policy"),(0,r.kt)("p",null,"This document is to assist in deciding what extensions should be bundled or maintained by the DuRoom project team."),(0,r.kt)("p",null,'Understand that DuRoom aims to have a lean and efficient team. To guarantee a transparent workload, we intentionally have a "this could be an extension" mentality. The acronym D.O.R.C. spells out our decision-making process.'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Density"),": prevent bloating DuRoom so that it becomes a burden to install on shared hosting plans with limited space."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Opinionatedness"),": no extensions should be bundled that is only useful by only a limited amount of communities or on specific hosting environments."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Responsibility"),": extensions that could easily be maintained by others should be maintained by others."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Complexity"),": extensions that are complex in terms of design, frontend or backend code should not be a responsibility of the DuRoom project team.")),(0,r.kt)("h3",{id:"density"},"Density"),(0,r.kt)("p",null,"To prevent the installation size of DuRoom to continuously increasing we need to protect it from extensions that bloat it. We should ship extensions with DuRoom that, for instance, have kilobytes in media files."),(0,r.kt)("h3",{id:"opinionatedness"},"Opinionatedness"),(0,r.kt)("p",null,"Our goal is to allow installation of DuRoom, in its vanilla form, by any community on any hosting environment. This includes shared hosting environment as well."),(0,r.kt)("p",null,"Releasing DuRoom with extensions that add functionality specific to cloud based (AWS) installations or for corporate support communities, as such, is unwanted."),(0,r.kt)("h3",{id:"responsibility"},"Responsibility"),(0,r.kt)("p",null,"Protecting the time of the project team is key. To do so we should empower the ecosystem in building extensions that it needs. Therefor we distance ourselves from the responsibility of building every and all extensions. The responsibility of extension development is held primarily by our community."))}m.isMDXComponent=!0}}]);