"use strict";(self.webpackChunkduroom_docs=self.webpackChunkduroom_docs||[]).push([[5134],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6607:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],l={},s="Mail Drivers",u={unversionedId:"extend/mail",id:"extend/mail",title:"Mail Drivers",description:"In addition to the default drivers in core, DuRoom allows new mail drivers to be added through extenders. To create your own mail driver, you'll need to create a class implementing \\DuRoom\\Mail\\DriverInterface. DuRoom actually takes care of the frontend for providing email settings: just declare which settings you need, and any default values, in availableSettings.",source:"@site/docs/extend/mail.md",sourceDirName:"extend",slug:"/extend/mail",permalink:"/docs/extend/mail",draft:!1,editUrl:"https://github.com/DuRoom/docs/tree/master/docs/extend/mail.md",tags:[],version:"current",frontMatter:{},sidebar:"extendSidebar",previous:{title:"Formatting",permalink:"/docs/extend/formatting"},next:{title:"Middleware",permalink:"/docs/extend/middleware"}},c={},d=[],p={toc:d};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mail-drivers"},"Mail Drivers"),(0,o.kt)("p",null,"In addition to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/mail"},"default drivers in core"),", DuRoom allows new mail drivers to be added through extenders. To create your own mail driver, you'll need to create a class implementing ",(0,o.kt)("inlineCode",{parentName:"p"},"\\DuRoom\\Mail\\DriverInterface"),". DuRoom actually takes care of the frontend for providing email settings: just declare which settings you need, and any default values, in ",(0,o.kt)("inlineCode",{parentName:"p"},"availableSettings"),"."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use DuRoom\\Mail\\DriverInterface;\nuse Illuminate\\Contracts\\Validation\\Factory;\nuse Illuminate\\Mail\\Transport\\MailgunTransport;\nuse Illuminate\\Support\\MessageBag;\nuse Swift_Transport;\n\nclass MailgunDriver implements DriverInterface\n{\n    public function availableSettings(): array\n    {\n        return [\n            'setting_one' => '',\n            'setting_two' => 'defaultValue',\n            'dropdown_setting' => [\n                'option_one_val' => 'Option One Display',\n                'option_two_val' => 'Option Two Display',\n            ],\n        ];\n    }\n\n    public function validate(SettingsRepositoryInterface $settings, Factory $validator): MessageBag\n    {\n        $validator->make($settings->all(), [\n            'setting_one' => 'required',\n            'setting_two' => 'nullable|integer',\n        ])->errors();\n    }\n\n    public function canSend(): bool\n    {\n        return true;\n    }\n\n    public function buildTransport(SettingsRepositoryInterface $settings): Swift_Transport\n    {\n        // Return a mail transport that implements Swift Transport\n    }\n}\n")),(0,o.kt)("p",null,"To register mail drivers, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"DuRoom\\Extend\\Mail")," extender in your extension's ",(0,o.kt)("inlineCode",{parentName:"p"},"extend.php")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use DuRoom\\Extend;\nuse YourNamespace\\Mail\\CustomDriver;\n\nreturn [\n  // Other extenders\n  (new Extend\\Mail())->driver(CustomDriver::class)\n  // Other extenders\n];\n")))}m.isMDXComponent=!0}}]);